{"version":3,"sources":["components/List.js","App.js","serviceWorker.js","index.js"],"names":["List","todos","deleteTodo","useEffect","getList","useState","data","setData","search","setSearch","select","setSelect","axios","get","then","res","catch","err","console","log","filterData","filter1","filter","item","title","indexOf","day_list","day","Date","getDay","type","placeholder","onChange","e","value","target","className","length","map","key","_id","style","marginBottom","fontSize","About","Users","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4PA+FeA,EA5FF,SAAC,GAA0B,EAAxBC,MAAwB,EAAjBC,WACnBC,qBAAU,WACNC,MACD,IAHiC,MAKZC,mBAAS,IALG,mBAK7BC,EAL6B,KAKvBC,EALuB,OAMRF,mBAAS,IAND,mBAM7BG,EAN6B,KAMrBC,EANqB,OAORJ,mBAAS,QAPD,mBAO7BK,EAP6B,KAOrBC,EAPqB,KAQ9BP,EAAU,WACZQ,IACKC,IAAI,aACJC,MAAK,SAAAC,GACEA,EAAIT,MACJC,EAAQQ,EAAIT,SAGnBU,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAQ5BG,EAAa,WACf,IAAMC,EAAUf,EAAKgB,QAAO,SAAAC,GACxB,OAAuC,IAAhCA,EAAKC,MAAMC,QAAQjB,MAY9B,MATc,UAAVE,EACUW,EAAQC,QAAO,SAAAC,GACrB,OAAuD,IAAhDA,EAAKG,EAASC,GAAKA,IAAI,IAAIF,QAAQf,MAGpCW,EAAQC,QAAO,SAAAC,GACrB,OAAsD,GAA/CA,EAAKG,EAASC,GAAKA,IAAI,IAAIF,QAAQf,OAKhDgB,EAAW,CACb,CAAEC,IAAK,CAAC,SAAK,QACb,CAAEA,IAAK,CAAC,SAAK,QACb,CAAEA,IAAK,CAAC,SAAK,QACb,CAAEA,IAAK,CAAC,SAAK,QACb,CAAEA,IAAK,CAAC,SAAK,QACb,CAAEA,IAAK,CAAC,SAAK,QACb,CAAEA,IAAK,CAAC,SAAK,SAIXA,GADO,IAAIC,MACAC,SAEjB,OACI,6BACI,2BACIC,KAAK,OACLC,YAAY,uCACZC,SAAU,SAAAC,GAAC,OAxCFC,EAwCmBD,EAAEE,OAAOD,WAvC7CzB,EAAUyB,GADO,IAAAA,KA0Cb,4BAAQF,SAAU,SAAAC,GAAC,OAvCNC,EAuCuBD,EAAEE,OAAOD,WAtCjDvB,EAAUuB,GADO,IAAAA,IAwCT,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,WAEJ,wBAAIE,UAAU,QACThB,KAAgBA,IAAaiB,OAAS,EACnCjB,IAAakB,KAAI,SAAAf,GACb,OACI,wBAAIgB,IAAKhB,EAAKiB,KACV,yBACIC,MAAO,CACHC,aAAc,OACdC,SAAU,SAGbpB,EAAKC,OAEV,wDACSE,EAASC,GAAKA,IAAI,GAD3B,6BAEKJ,EAAKG,EAASC,GAAKA,IAAI,SAMxC,6C,sBC9CpB,SAASiB,IACL,OAAO,qCAGX,SAASC,IACL,OAAO,qCAGIC,MA5CH,WACR,OACI,kBAAC,IAAD,KACI,yBAAKV,UAAU,OACX,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMW,GAAG,KAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAOZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,UACR,kBAACJ,EAAD,OAEJ,kBAAC,IAAD,CAAOI,KAAK,UACR,kBAACH,EAAD,OAEJ,kBAAC,IAAD,CAAOG,KAAK,KACR,kBAAC,EAAD,WCtBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAgD,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.95a557f1.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst List = ({ todos, deleteTodo }) => {\r\n    useEffect(() => {\r\n        getList();\r\n    }, []);\r\n\r\n    const [data, setData] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [select, setSelect] = useState(\"Open\");\r\n    const getList = () => {\r\n        axios\r\n            .get(\"/api/test\")\r\n            .then(res => {\r\n                if (res.data) {\r\n                    setData(res.data);\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n    const updateSearch = value => {\r\n        setSearch(value);\r\n    };\r\n    const updateSelect = value => {\r\n        setSelect(value);\r\n    };\r\n    const filterData = () => {\r\n        const filter1 = data.filter(item => {\r\n            return item.title.indexOf(search) !== -1;\r\n        });\r\n        let filter2;\r\n        if (select == \"Closed\") {\r\n            filter2 = filter1.filter(item => {\r\n                return item[day_list[day].day[1]].indexOf(select) !== -1;\r\n            });\r\n        } else {\r\n            filter2 = filter1.filter(item => {\r\n                return item[day_list[day].day[1]].indexOf(select) == -1;\r\n            });\r\n        }\r\n        return filter2;\r\n    };\r\n    const day_list = [\r\n        { day: [\"日\", \"SUN\"] },\r\n        { day: [\"一\", \"SUN\"] },\r\n        { day: [\"二\", \"SUN\"] },\r\n        { day: [\"三\", \"SUN\"] },\r\n        { day: [\"四\", \"SUN\"] },\r\n        { day: [\"五\", \"SUN\"] },\r\n        { day: [\"六\", \"SUN\"] }\r\n    ];\r\n\r\n    const date = new Date();\r\n    const day = date.getDay(); // or \"new Date().getDay()\";\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"查詢店家名稱\"\r\n                onChange={e => updateSearch(e.target.value)}\r\n            />\r\n            <select onChange={e => updateSelect(e.target.value)}>\r\n                <option value=\"Open\">Open</option>\r\n                <option value=\"Closed\">Closed</option>\r\n            </select>\r\n            <ul className=\"list\">\r\n                {filterData() && filterData().length > 0 ? (\r\n                    filterData().map(item => {\r\n                        return (\r\n                            <li key={item._id}>\r\n                                <div\r\n                                    style={{\r\n                                        marginBottom: \"10px\",\r\n                                        fontSize: \"20px\"\r\n                                    }}\r\n                                >\r\n                                    {item.title}\r\n                                </div>\r\n                                <div>\r\n                                    今日星期{day_list[day].day[0]} 營業時間:\r\n                                    {item[day_list[day].day[1]]}\r\n                                </div>\r\n                            </li>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <li>No data(s)</li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\n\nimport List from \"./components/List\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nconst App = () => {\n    return (\n        <Router>\n            <div className=\"App\">\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to=\"/\">Home</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/about\">About</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/users\">Users</Link>\n                        </li>\n                    </ul>\n                </nav>\n\n                {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                <Switch>\n                    <Route path=\"/about\">\n                        <About />\n                    </Route>\n                    <Route path=\"/users\">\n                        <Users />\n                    </Route>\n                    <Route path=\"/\">\n                        <List />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nfunction About() {\n    return <h2>About</h2>;\n}\n\nfunction Users() {\n    return <h2>Users</h2>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}